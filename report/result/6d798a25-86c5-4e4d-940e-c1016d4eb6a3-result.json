{"name": "login_4登录成功", "status": "broken", "statusDetails": {"message": "KeyError: 'id'", "trace": "self = <testcase.test_excel_case.TestExcel object at 0x1137d0450>\ncase = {'cookies': '', 'headers': '{\"versionCode\": \"1\", \"platform\": \"1\", \"mobileBrand\": \"1\", \"mobileModels\": \"1\", \"deviceToken\": \"1\"}', 'status_code': 200.0, '前置条件': '', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    def test_run(self, case):\n        # data_key = ExcelConfig.DataConfig\n    \n        # run_list第1个用例，通过用例 key取到value\n        url = ConfigYaml().get_config_url() + case[data_key.url]\n        print(url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n        # 验证前置条件\n        if pre_exec:\n            # pass\n    \n            # 找到执行用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为：%s\" % pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers, cookies = self.get_correlation(headers, cookies, pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n        res = self.run_api(url, method, params, header, cookie)\n        print(\"测试用例执行：%s\" % res)\n    \n        # allure\n        # sheet名称  feature 一级标签\n        allure.dynamic.feature(sheet_name)\n        # 模块   story 二级标签\n        allure.dynamic.story(case_model)\n        # 用例ID+接口名称  title\n        allure.dynamic.title(case_id + case_name)\n        # 请求URL  请求类型 期望结果 实际结果描述\n        desc = \"<font color='red'>请求URL：</font>{}<Br/>\" \\\n               \"<font color='red'>请求类型：</font>{}<Br/>\" \\\n               \"<font color='red'>期望结果：</font>{}<Br/>\" \\\n               \"<font color='red'>实际结果：</font>{}\".format(url, method, expect_result, res)\n        allure.dynamic.description(desc)\n    \n        # 断言验证\n        # 状态码；返回结果内容；数据库相关结果验证\n        # 状态码\n        assert_util = AssertUtil()\n        assert_util.assert_code(int(res[\"code\"]), int(code))\n    \n        # 返回结果内容\n        assert_util.assert_in_body(str(res[\"body\"]), str(expect_result))\n    \n        # 数据库相关结果验证\n>       Base.assert_db(\"db_1\", res[\"body\"], db_verify)\n\ntestcase/test_excel_case.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndb_name = 'db_1'\nresult = {'code': 0, 'data': {'address': None, 'autoRenewVip': 0, 'avatar': 'http://zxhd-public-media.oss-cn-beijing.aliyuncs.c...WnB3blhka0VSZjdlYVdxV1lfMWptTUFkQ3phUTRiUHZTOXk5OUVybGZDYnItS0FzWWhmenRoLWd3QVRra3BxR0d2M3l0QXc6', ...}, 'msg': '请求成功'}\ndb_verify = \"select * from user where mobile = '19900002000'\"\n\n    def assert_db(db_name, result, db_verify):\n        assert_util = AssertUtil()\n    \n        # 数据库相关结果验证\n        # 1.初始化数据库\n        # sql = init_db(\"db_1\")\n        sql = init_db(db_name)\n        # 2.查询sql，Excel定义好的\n        db_res = sql.fetchone(db_verify)\n        log.debug(\"数据库查询结果：{}\".format(str(db_res)))\n        # 3.数据库的结果 与 接口返回的结果 验证\n        # 3.1 获取数据库结果的key\n        verify_list = list(dict(db_res).keys())\n        # 3.2 根据key获取数据库结果，接口结果\n        for line in verify_list:\n            # res_line = res[\"body\"][line]  # 接口返回的结果\n>           res_line = result[line]  # 接口返回的结果\nE           KeyError: 'id'\n\ncommon/Base.py:49: KeyError"}, "description": "<font color='red'>请求URL：</font>https://sc-api-dev.candyabc.com/user/login/<Br/><font color='red'>请求类型：</font>POST<Br/><font color='red'>期望结果：</font>code': 0<Br/><font color='red'>实际结果：</font>{'code': 200, 'body': {'code': 0, 'msg': '请求成功', 'data': {'token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1aWQiOiIxNDY5NjIiLCJuYmYiOjE1ODE0ODQ1MTgsImlzcyI6Inp4aGQiLCJ3eHVpZCI6IjAiLCJleHAiOjE1ODIwODkzMTgsImlhdCI6MTU4MTQ4NDUxOCwianRpIjoiYTRhZGQ1MmYzZTdiNGZmMDlhYWIzODM0M2EzNDRhMDMifQ.dO5WqLIk98zDLGcZpwnXdkERf7eaWqWY_1jmMAdCzaQ4bPvS9y99ErlfCbr-KAsYhfzth-gwATkkpqGGv3ytAw', 'base64Token': 'ZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKSVV6VXhNaUo5LmV5SjFhV1FpT2lJeE5EWTVOaklpTENKdVltWWlPakUxT0RFME9EUTFNVGdzSW1semN5STZJbnA0YUdRaUxDSjNlSFZwWkNJNklqQWlMQ0psZUhBaU9qRTFPREl3T0Rrek1UZ3NJbWxoZENJNk1UVTRNVFE0TkRVeE9Dd2lhblJwSWpvaVlUUmhaR1ExTW1ZelpUZGlOR1ptTURsaFlXSXpPRE0wTTJFek5EUmhNRE1pZlEuZE81V3FMSWs5OHpETEdjWnB3blhka0VSZjdlYVdxV1lfMWptTUFkQ3phUTRiUHZTOXk5OUVybGZDYnItS0FzWWhmenRoLWd3QVRra3BxR0d2M3l0QXc6', 'mobile': '19900002000', 'nameEn': 'Charles', 'nameCn': None, 'status': 0, 'statusStr': None, 'refreshToken': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1aWQiOiIxNDY5NjIiLCJuYmYiOjE1ODE0ODQ1MTgsImlzcyI6Inp4aGQiLCJ3eHVpZCI6IjAiLCJleHAiOjE1ODQwNzY1MTgsImlhdCI6MTU4MTQ4NDUxOCwianRpIjoiYWNjMWQ4MDBmYjQ5NGQ0Mjk1NWMyYThhZDg2ZDJlZTEifQ.FVsXfY12NAvfQYeJZawtXkoNq8B_llseIjvKAV8q_hS1Q6NvN3Yo6IQAHADJH4vMbJyMjuiGN9y4aoUICT8TVg', 'reshB64Token': 'ZXlKMGVYQWlPaUpLVjFRaUxDSmhiR2NpT2lKSVV6VXhNaUo5LmV5SjFhV1FpT2lJeE5EWTVOaklpTENKdVltWWlPakUxT0RFME9EUTFNVGdzSW1semN5STZJbnA0YUdRaUxDSjNlSFZwWkNJNklqQWlMQ0psZUhBaU9qRTFPRFF3TnpZMU1UZ3NJbWxoZENJNk1UVTRNVFE0TkRVeE9Dd2lhblJwSWpvaVlXTmpNV1E0TURCbVlqUTVOR1EwTWprMU5XTXlZVGhoWkRnMlpESmxaVEVpZlEuRlZzWGZZMTJOQXZmUVllSlphd3RYa29OcThCX2xsc2VJanZLQVY4cV9oUzFRNk52TjNZbzZJUUFIQURKSDR2TWJKeU1qdWlHTjl5NGFvVUlDVDhUVmc6', 'uuId': 'b41e03cb6552451d94aec7a14c89df9b', 'userId': '146962', 'refereeMobile': None, 'level': 2, 'levelLocked': 0, 'birthdayAt': 1279766100000, 'gender': 0, 'avatar': 'http://zxhd-public-media.oss-cn-beijing.aliyuncs.com/1560842934984-710954.png', 'city': None, 'address': None, 'restClassHours': 0, 'classHoursExpiredTime': None, 'userTotalCandys': 0, 'labelList': [], 'wechatInfo': None, 'vip': 1, 'vipExpiredAt': '2024/06/14', 'autoRenewVip': 0, 'exp': 0, 'expStartedAt': None, 'expExpiredAt': None}}}", "attachments": [{"name": "log", "source": "63e8068a-1342-4e19-b5cf-caad131e2453-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'用例ID': 'login_4', '模块': '登录', '接口名称': '登录成功', '请求URL': '/user/login/', '前置条件': '', '请求类型': 'POST', '请求参数类型': 'json', '请求参数': '{\"mobile\": \"19900002000\", \"vcode\": \"1111\" }', '预期结果': \"code': 0\", '实际结果': '', '备注': '', '是否运行': 'y', 'headers': '{\"versionCode\": \"1\", \"platform\": \"1\", \"mobileBrand\": \"1\", \"mobileModels\": \"1\", \"deviceToken\": \"1\"}', 'cookies': '', 'status_code': 200.0, '数据库验证': \"select * from user where mobile = '19900002000'\"}"}], "start": 1581484518724, "stop": 1581484518985, "uuid": "ae03afa8-770a-4a6f-a038-ba2578c3a2a3", "historyId": "230c525572479b23adf8606517f86524", "testCaseId": "dd2521432c4340b625f0f9387327dd8f", "fullName": "testcase.test_excel_case.TestExcel#test_run", "labels": [{"name": "feature", "value": "Candyabc接口测试"}, {"name": "story", "value": "登录"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel"}, {"name": "host", "value": "weinandeMacBook-Pro.local"}, {"name": "thread", "value": "4427-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_excel_case"}]}
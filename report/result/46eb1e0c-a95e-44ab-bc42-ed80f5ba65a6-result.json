{"name": "test_run[case3]", "status": "broken", "statusDetails": {"message": "requests.exceptions.InvalidHeader: Value for header {level: 2} must be of type str or bytes, not <class 'int'>", "trace": "header = ('level', 2)\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n>           if not pat.match(value):\nE           TypeError: expected string or bytes-like object\n\n../../venv/lib/python3.7/site-packages/requests/utils.py:941: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_excel_case.TestExcel object at 0x111a3cfd0>\ncase = {'cookies': '', 'headers': '{\"versionCode\": \"1\", \"platform\": \"1\", \"mobileBrand\": \"1\", \"mobileModels\": \"1\", \"deviceToken\": \"1\",\"Authorization\": \"basic ${base64Token}$\",\"level\":2,\"p\":3,\"size\":5}', 'status_code': 200.0, '前置条件': 'login_1', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    def test_run(self, case):\n        # data_key = ExcelConfig.DataConfig\n    \n        # run_list第1个用例，通过用例 key取到value\n        url = ConfigYaml().get_config_url() + case[data_key.url]\n        print(url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n        # 验证前置条件\n        if pre_exec:\n            # pass\n    \n            # 找到执行用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为：%s\" % pre_case)\n            pre_res = self.run_pre(pre_case)\n            headers, cookies = self.get_correlation(headers, cookies, pre_res)\n    \n        header = Base.json_parse(headers)\n        cookie = Base.json_parse(cookies)\n>       res = self.run_api(url, method, params, header, cookie)\n\ntestcase/test_excel_case.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntestcase/test_excel_case.py:54: in run_api\n    res = request.post(url, json=params, headers=header, cookies=cookie)\nutils/RequestsUtil.py:106: in post\n    return self.request_api(url, method=\"post\", **kwargs)\nutils/RequestsUtil.py:72: in request_api\n    r = requests.post(url, data=data, json=json, headers=headers, cookies=cookies)\n../../venv/lib/python3.7/site-packages/requests/api.py:116: in post\n    return request('post', url, data=data, json=json, **kwargs)\n../../venv/lib/python3.7/site-packages/requests/api.py:60: in request\n    return session.request(method=method, url=url, **kwargs)\n../../venv/lib/python3.7/site-packages/requests/sessions.py:519: in request\n    prep = self.prepare_request(req)\n../../venv/lib/python3.7/site-packages/requests/sessions.py:462: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n../../venv/lib/python3.7/site-packages/requests/models.py:314: in prepare\n    self.prepare_headers(headers)\n../../venv/lib/python3.7/site-packages/requests/models.py:448: in prepare_headers\n    check_header_validity(header)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nheader = ('level', 2)\n\n    def check_header_validity(header):\n        \"\"\"Verifies that header value is a string which doesn't contain\n        leading whitespace or return characters. This prevents unintended\n        header injection.\n    \n        :param header: tuple, in the format (name, value).\n        \"\"\"\n        name, value = header\n    \n        if isinstance(value, bytes):\n            pat = _CLEAN_HEADER_REGEX_BYTE\n        else:\n            pat = _CLEAN_HEADER_REGEX_STR\n        try:\n            if not pat.match(value):\n                raise InvalidHeader(\"Invalid return character or leading space in header: %s\" % name)\n        except TypeError:\n            raise InvalidHeader(\"Value for header {%s: %s} must be of type str or \"\n>                               \"bytes, not %s\" % (name, value, type(value)))\nE           requests.exceptions.InvalidHeader: Value for header {level: 2} must be of type str or bytes, not <class 'int'>\n\n../../venv/lib/python3.7/site-packages/requests/utils.py:945: InvalidHeader"}, "attachments": [{"name": "log", "source": "d3a15180-1faa-43a0-a12f-f993ee0d05b0-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'用例ID': 'getUserReservation_1', '模块': '获取用户预约信息', '接口名称': '获取用户预约信息成功', '请求URL': '/coursePlan/page-reservation-info', '前置条件': 'login_1', '请求类型': 'post', '请求参数类型': 'json', '请求参数': '', '预期结果': \"code': 0\", '实际结果': '', '备注': '', '是否运行': 'y', 'headers': '{\"versionCode\": \"1\", \"platform\": \"1\", \"mobileBrand\": \"1\", \"mobileModels\": \"1\", \"deviceToken\": \"1\",\"Authorization\": \"basic ${base64Token}$\",\"level\":2,\"p\":3,\"size\":5}', 'cookies': '', 'status_code': 200.0, '数据库验证': ''}"}], "start": 1581486882492, "stop": 1581486882686, "uuid": "07048117-e2c9-4cdf-939e-4fdf261d25f7", "historyId": "6c4cd46130ba175c3ca325dc433ed566", "testCaseId": "dd2521432c4340b625f0f9387327dd8f", "fullName": "testcase.test_excel_case.TestExcel#test_run", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel"}, {"name": "host", "value": "weinandeMacBook-Pro.local"}, {"name": "thread", "value": "5135-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_excel_case"}]}